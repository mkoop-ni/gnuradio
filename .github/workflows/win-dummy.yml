name: 'Windows test Builder'
on:
  workflow_dispatch:


jobs:
  ## duplicate from make-test.yml
  # Check hashes first
  check-hashes:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    name: Check hashes
    container:
      image: 'gnuradio/ci:fedora-42-3.10'
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Add git repo to safe repos
      run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
    - name: Run hash fixer on all binding files
      run: gr-utils/bindtool/scripts/binding-hash-hotfixer.zsh gr-*/python/*/bindings/*.cc gnuradio-runtime/python/gnuradio/gr/bindings/*.cc
    - name: get changed files
      run: >
          git --no-pager diff -z --name-only --
          > /tmp/hashdiff
          ; [[ ! -s /tmp/hashdiff ]] && exit 0
          ; sed -z 's;.*;::error file=&::Hash mismatch in &\n;' /tmp/hashdiff
          | tr -d '\0'
          ; exit -1

  # We continue checking C++ formatting. No one gets free CPU cycles if they
  # can't use clang-format.
  check-formatting:
    name: Check C++ Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,hpp,cpp,cc,cc.in'
        clangFormatVersion: 14
  check-python-formatting:
    name: Check Python Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: quentinguidee/pep8-action@v1
      with:
        # -----------------------------------
        # UPDATE tox.ini when making changes!
        arguments: '--max-line-length=120 --ignore E265,E266,E275,E402,E501,E704,E712,E713,E714,E711,E721,E722,E741,W504,W605 --exclude *.yml.py'
        # -----------------------------------
  ## end duplication
  download-artifact:
    needs: [check-hashes, check-formatting, check-python-formatting]
    runs-on: ubuntu-24.04

    steps:
    - name: Get latest successful run ID
      id: get_run
      uses: actions/github-script@v7
      with:
        script: |
          const workflowName = "win-installer-build.yml"; // Name of the source workflow file
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workflowName,
            status: "success",
            per_page: 1
          });
          const runId = runs.data.workflow_runs[0].id;
          return runId;

    - name: Download artifact from latest successful run
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ steps.get_run.outputs.result }}
        name: installation archive' # Replace with the actual artifact name
        path: ./downloaded-artifact

    - name: List downloaded files
      run: ls -R ./downloaded-artifact
